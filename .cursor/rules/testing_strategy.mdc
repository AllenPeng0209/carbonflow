---
description: 
globs: 
alwaysApply: true
---
# Testing Strategy & Quality Standards

本文件定义了 ClimateSeal 项目的测试策略与质量标准。编写可测试的代码并为其配备全面的自动化测试，是每一位开发者的核心职责。我们的目标不是追求100%的覆盖率，而是通过明智的测试组合，最大限度地提升我们对代码质量的信心。

---

### **1. 测试金字塔模型**

我们遵循经典的测试金字塔模型，合理分配不同层级的测试资源：

```
      / \
     /   \   <-- 端到端测试 (E2E Tests) - 少而精，覆盖核心用户流程
    /-----\
   /       \ <-- 集成测试 (Integration Tests) - 测试多个单元如何协同工作
  /---------\
 /           \ <- 单元测试 (Unit Tests) - 量大、快速，构筑坚实基础
/-------------\
```

-   **单元测试 (70%)**: 构成测试主体。它们运行速度快，能提供快速反馈。
-   **集成测试 (20%)**: 确保模块内部或模块之间的交互符合预期。
-   **端到端测试 (10%)**: 从用户视角出发，模拟真实操作，验证关键业务流程的正确性。

---

### **2. 各层级测试详解**

#### **单元测试 (Unit Tests)**

-   **目标**: 测试单一函数、方法或组件的逻辑，不涉及外部依赖（如API、数据库）。
-   **工具**: `Vitest`, `React Testing Library`
-   **要求**:
    -   **必须测试**: `lib/` 下的纯函数，`features/*/services/` 中的复杂业务逻辑，`features/*/hooks/` 中的自定义Hooks。
    -   **测试重点**: 边界条件、错误处理、各种输入下的输出。
    -   **Mocking**: 使用 `vi.mock` 来模拟外部依赖。

#### **集成测试 (Integration Tests)**

-   **目标**: 测试一个完整的功能模块（feature）是否能正常工作。
-   **工具**: `Vitest`, `React Testing Library`
-   **要求**:
    -   **必须测试**: `features/` 目录下的每个核心功能模块。例如，测试 `features/auth` 时，应确保 `LoginForm` 组件、`useAuth` hook 和认证服务能够协同工作，完成一次登录。
    -   **测试重点**: 模块内组件与服务的交互，状态管理的正确性。
    -   **Mocking**: 可以 mock 掉真正的后端API（`msw` 是一个好选择），但模块内部的依赖不应被 mock。

#### **端到端测试 (E2E Tests)**

-   **目标**: 模拟真实用户，从UI开始，贯穿整个技术栈，验证核心业务流程。
-   **工具**: `Playwright` 或 `Cypress`
-   **要求**:
    -   **必须覆盖的核心流程**:
        1.  用户注册与登录。
        2.  创建一个新的 CarbonFlow 项目。
        3.  在画布上添加节点、连接节点，并输入数据。
        4.  成功执行一次LCA计算。
        5.  生成并预览一份PDF报告。
    -   **测试重点**: 关键流程的可用性，确保没有破坏性的变更。
    -   **频率**: 这些测试运行较慢，可以在合并到 `develop` 分支后触发，或在夜间定时运行。

---

### **3. 代码覆盖率**

-   我们不强制追求具体的数字，但我们会将代码覆盖率报告作为 Code Review 的一个参考。
-   一个 Pull Request 如果导致了**核心业务逻辑**（如LCA计算服务）的测试覆盖率显著下降，将需要提供充分的理由才能被合并。

